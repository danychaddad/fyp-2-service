name: Java CI/CD with Maven

on:
  pull_request:
    branches: [ "main" ]  # Runs tests on pull requests to the main branch

  push:
    branches: [ "main" ]  # Deploys when changes are pushed (merged) to the main branch

jobs:
  # Job for pull requests to 'main' branch - Runs tests
  build:
    name: Java CI/CD with Maven - Build and Test
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - uses: actions/checkout@v4

      # Set up JDK 21 environment
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Build and run tests
      - name: Build with Maven and run tests
        run: mvn -B clean verify

  # Job for the 'main' branch - Deploys the app
    deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Runs only when changes are pushed to the 'main' branch

    steps:
      # Check out the repository code
      - uses: actions/checkout@v4

      # Set up JDK 21 environment
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Build the application without tests
      - name: Package with Maven
        run: mvn package -DskipTests

      # Add SSH key for deployment
      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      # Kill any existing Java processes on EC2
      - name: Stop existing Java processes
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'pkill -f java || true'

      # Transfer the JAR file to EC2
      - name: Transfer JAR to EC2
        run: scp -o StrictHostKeyChecking=no target/*.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app.jar

      # Run the application on EC2
      - name: Run Application on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          export MONGODB_URI=${{ secrets.MONGODB_URI }}
          export MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }}
          export MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
          nohup java -jar /home/${{ secrets.EC2_USER }}/app.jar > /home/${{ secrets.EC2_USER }}/app.log 2>&1 &
          EOF

